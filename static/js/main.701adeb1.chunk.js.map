{"version":3,"sources":["Counter.jsx","AddCounterForm.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","id","name","count","onClick","decrement","increment","remove","AddCounterForm","useState","setName","setCount","type","value","onChange","e","target","onSubmit","Number","App","counters","setCounters","incrementCounter","console","log","index","findIndex","el","newCounters","decrementCounter","map","removeCounter","filter","reduce","acc","cur","key","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.701adeb1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nfunction Counter(props) {\r\n\r\n    return (\r\n        <div>\r\n            ID <strong>{props.id}</strong>\r\n            Counter name <strong>{props.name}</strong>\r\n            Counter value <strong>{props.count}</strong>\r\n\r\n            <button onClick={() => props.decrement(props.id)}>-</button>\r\n            <button onClick={() => props.increment(props.id)}>+</button>\r\n            <button onClick={() => props.remove(props.id)}>Delete</button>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Counter;","import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nfunction AddCounterForm(props) {\r\n\r\n    const [name, setName] = useState('---');\r\n    const [count, setCount] = useState(456);\r\n\r\n    const onSubmit = () => {\r\n        props.onSubmit(name, Number(count));\r\n        setName('');\r\n        setCount(0);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n\r\n            <input type=\"text\" name='name' value={name}\r\n                   onChange={e => setName(e.target.value)} />\r\n\r\n            <input type=\"number\" name='count' value={count}\r\n                   onChange={e => setCount(e.target.value)} />\r\n\r\n\r\n            <button onClick={() => onSubmit(name, count)}>Create</button>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddCounterForm;","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Counter from './Counter';\r\nimport AddCounterForm from './AddCounterForm';\r\n\r\nfunction App() {\r\n\r\n    const InitialCountersState = [\r\n        { id: 123, name: 'Counter 1', count: 2 },\r\n        { id: 234, name: 'Counter 2', count: 5 },\r\n        { id: 345, name: 'Counter 3', count: 8 },\r\n        { id: 456, name: 'Counter 4', count: 48 },\r\n    ];\r\n\r\n\r\n    const [counters, setCounters] = useState(InitialCountersState);\r\n\r\n    const resetTotalCount = () => {\r\n\r\n        console.log('resetTotalCount');\r\n        const newCounters = counters.map(el => ({ ...el, count: 0 }));\r\n        setCounters(newCounters);\r\n    };\r\n\r\n    const incrementCounter = (id) => {\r\n        console.log('INC ' + id);\r\n        const index = counters.findIndex(el => el.id === id);\r\n        const newCounters = [...counters];\r\n        newCounters[index].count = newCounters[index].count + 1;\r\n        setCounters(newCounters);\r\n    };\r\n\r\n    const decrementCounter = (id) => {\r\n        console.log('DECR ' + id);\r\n        const newCounters = counters.map(el => {\r\n            if (el.id === id) return { ...el, count: el.count - 1 };\r\n            return el;\r\n        });\r\n        setCounters(newCounters);\r\n    };\r\n\r\n    const removeCounter = (id) => {\r\n        const newCounters = counters.filter(el => el.id !== id);\r\n        setCounters(newCounters);\r\n    };\r\n\r\n    const addCounter = (name, count) => {\r\n        const newCounters = [...counters, {\r\n            id: Math.random(),\r\n            name,\r\n            count: count\r\n        }];\r\n        setCounters(newCounters);\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Counters</h1>\r\n\r\n            Total {counters.reduce((acc, cur) => acc + cur.count, 0)}\r\n            <button onClick={resetTotalCount}>Reset total count</button>\r\n\r\n            <hr />\r\n\r\n            {\r\n                counters.map(el => <Counter key={el.id}\r\n                                            id={el.id}\r\n                                            name={el.name}\r\n                                            count={el.count}\r\n                                            increment={incrementCounter}\r\n                                            decrement={decrementCounter}\r\n                                            remove={removeCounter}\r\n                />)\r\n            }\r\n\r\n\r\n            <hr />\r\n\r\n            <AddCounterForm onSubmit={addCounter} />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n\r\n\r\n"],"sourceRoot":""}